<Project ToolsVersion="15.0">
  <!--anborod NOTE:: This relies on the common props file generated by MSBuildForUnity to set the rest up-->
  <Import Project="$([MSBuild]::GetPathOfFileAbove(MSBuildForUnity.Common.props))" Condition="Exists('$([MSBuild]::GetPathOfFileAbove(MSBuildForUnity.Common.props))')" />
    
  <PropertyGroup Condition="'$(UnityCurrentTargetFramework)' == ''">
    <TargetFramework>net46</TargetFramework>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(UnityCurrentTargetFramework)' != ''">
    <TargetFramework>$(UnityCurrentTargetFramework)</TargetFramework>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UnityCurrentPlatform)'!=''">
    <UnityPlatform>$(UnityCurrentPlatform)</UnityPlatform>
  </PropertyGroup>

  <PropertyGroup>
    <!--anborod NOTE:: Currently this is a limitation, hence the file duplication..-->
    <UnityConfiguration>Player</UnityConfiguration>
    <ProjectGuid>{E8060EE6-F0CB-459B-A4B2-634E87DFDD9C}</ProjectGuid>
    <AllowUnsafeBlocks>False</AllowUnsafeBlocks>
    <LangVersion>7.3</LangVersion>
    <IsEditorOnlyTarget>False</IsEditorOnlyTarget>
    <EnableDefaultItems>false</EnableDefaultItems>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>

    <AssemblyName>CustomUnityBuild</AssemblyName>
    <RootNamespace>CustomUnityBuild</RootNamespace>
  </PropertyGroup>

  <!-- anborod NOTE:: These are needed for meta generation -->
  <!--anborod NOTE:: NOT WORKING <PropertyGroup>
    <UnityPlayer Condition="'$(UnityPlatform)' == 'WindowsStandalone32' OR '$(UnityPlatform)' == 'WindowsStandalone64'">Standalone</UnityPlayer>
    <UnityPlayer Condition="'$(UnityPlatform)' == 'Android'">Android</UnityPlayer>
    <UnityPlayer Condition="'$(UnityPlatform)' == 'iOS'">iOS</UnityPlayer>
    <UnityPlayer Condition="'$(UnityPlatform)' == 'WSA'">UAP</UnityPlayer>
  </PropertyGroup>-->

    <PropertyGroup>
    <!--anborod NOTE:: .obj is invisible to Unity, but Plugins isn't-->
    <BaseIntermediateOutputPath>.obj</BaseIntermediateOutputPath>
    <OutputPath>Plugins/Editor</OutputPath>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="MSBuildForUnity" Version="[0.9.2-*, 0.9.2]">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!--IMPORT SDK.props manually to be able to set the BaseIntermediateOutputPath above path-->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <!-- 
      This overrides the default, and excludes the "{TargetFrameworkDirectory}" from the search path which gets added by the import above.
      The purpose is to prevent MSBuild from using it to try and resolve assemblies from that location, as we use the Unity provided framework DLLs.
    -->
    <AssemblySearchPaths>{CandidateAssemblyFiles};{HintPathFromItem};{RawFileName};</AssemblySearchPaths>
  </PropertyGroup>

  <!--anborod NOTE:: This brings in all the #DEFINES and appropriate references for the platform and unity configuration specified-->
  <Import Project="$(MSBuildForUnityGeneratedProjectDirectory)\$(UnityPlatform).$(UnityConfiguration).props" />

  <!-- This is a "special" platform that will override references -->
  <Import Project="$(MSBuildForUnityGeneratedProjectDirectory)\Editor.InEditor.props" Condition="'$(IsEditorOnlyTarget)' == 'true'" />

  <PropertyGroup>
    <DefaultItemExcludes>$(DefaultItemExcludes)obj;bin;*.asmdef;*.asmdef.meta;*.csmap;</DefaultItemExcludes>
    <!-- This change prevents from System.Core dll to be removed and readded without the HintPath as is default behaviour for some MSBuild environments for System.Core.dll specifically.-->
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
  </PropertyGroup>

  <ItemGroup>
    <!--anborod NOTE:: This references all source in .src (invisible to Unity) folder.-->
    <!--anborod NOTE:: Add your NuGet packages here.-->
    <Compile Include=".src\**\*.cs" />
  </ItemGroup>

    <!--IMPORT SDK.targets-->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!--We control whether we build the project this way, depending on the platform/configuration-->
  <Target Name="OriginalBuild" DependsOnTargets="$(BuildDependsOn)">
  </Target>

  <Target Name="SetPlatformProperty">
    <CreateProperty Value="AnyCPU">
      <Output TaskParameter="Value" PropertyName="Platform" />
    </CreateProperty>
  </Target>
  
  <Target Name="Build" Returns="@(TargetPathWithTargetPlatformMoniker)">
    <CallTarget Targets="SetPlatformProperty" />
<!--SUPPORTED_PLATFORM_BUILD_CONDITION_TEMPLATE_START-->
    <CallTarget Targets="OriginalBuild" Condition="'$(UnityConfiguration)|$(UnityPlatform)'=='InEditor|Android'" /><CallTarget Targets="OriginalBuild" Condition="'$(UnityConfiguration)|$(UnityPlatform)'=='InEditor|iOS'" /><CallTarget Targets="OriginalBuild" Condition="'$(UnityConfiguration)|$(UnityPlatform)'=='InEditor|WindowsStandalone32'" /><CallTarget Targets="OriginalBuild" Condition="'$(UnityConfiguration)|$(UnityPlatform)'=='InEditor|WindowsStandalone64'" /><CallTarget Targets="OriginalBuild" Condition="'$(UnityConfiguration)|$(UnityPlatform)'=='InEditor|WSA'" /><CallTarget Targets="OriginalBuild" Condition="'$(UnityConfiguration)|$(UnityPlatform)'=='Player|WSA'" />
<!--SUPPORTED_PLATFORM_BUILD_CONDITION_TEMPLATE_END-->
  </Target>
</Project>